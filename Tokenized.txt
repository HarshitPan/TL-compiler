let Let
a Identifier
= Equals
10 NumberLiteral
; Semicolon
const Const
b Identifier
= Equals
null Null
; Semicolon
aa Identifier
+ BinaryOperator
bb Identifier
let Let
c Identifier
= Equals
a Identifier
+ BinaryOperator
b Identifier
* BinaryOperator
10 NumberLiteral
; Semicolon
b Identifier
= Equals
10 NumberLiteral
; Semicolon
let Let
f Identifier
; Semicolon
if If
( OpenParen
a Identifier
== EqualEqual
b Identifier
&& And
b Identifier
<= LessEqual
c Identifier
) CloseParen
{ OpenBrace
if If
( OpenParen
1 NumberLiteral
) CloseParen
{ OpenBrace
print Identifier
( OpenParen
a Identifier
) CloseParen
} CloseBrace
else Else
{ OpenBrace
print Identifier
( OpenParen
2 NumberLiteral
) CloseParen
} CloseBrace
} CloseBrace
while While
( OpenParen
1 NumberLiteral
) CloseParen
{ OpenBrace
print Identifier
( OpenParen
c Identifier
) CloseParen
} CloseBrace
print Identifier
( OpenParen
f Identifier
) CloseParen
func Func
name Identifier
( OpenParen
a Identifier
, Comma
b Identifier
) CloseParen
{ OpenBrace
print Identifier
( OpenParen
a Identifier
+ BinaryOperator
b Identifier
) CloseParen
return Return
5 NumberLiteral
; Semicolon
} CloseBrace
struct Struct
name Identifier
{ OpenBrace
let Let
a Identifier
; Semicolon
const Const
b Identifier
= Equals
20 NumberLiteral
; Semicolon
} CloseBrace
EndOfFile EOFToken
